# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CurrSettings(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, brightness: int=None, currency: str=None, finhub_key: str=None, polygon_key: str=None, colors: object=None):  # noqa: E501
        """CurrSettings - a model defined in Swagger

        :param brightness: The brightness of this CurrSettings.  # noqa: E501
        :type brightness: int
        :param currency: The currency of this CurrSettings.  # noqa: E501
        :type currency: str
        :param finhub_key: The finhub_key of this CurrSettings.  # noqa: E501
        :type finhub_key: str
        :param polygon_key: The polygon_key of this CurrSettings.  # noqa: E501
        :type polygon_key: str
        :param colors: The colors of this CurrSettings.  # noqa: E501
        :type colors: object
        """
        self.swagger_types = {
            'brightness': int,
            'currency': str,
            'finhub_key': str,
            'polygon_key': str,
            'colors': object
        }

        self.attribute_map = {
            'brightness': 'brightness',
            'currency': 'currency',
            'finhub_key': 'finhubKey',
            'polygon_key': 'polygonKey',
            'colors': 'colors'
        }

        self._brightness = brightness
        self._currency = currency
        self._finhub_key = finhub_key
        self._polygon_key = polygon_key
        self._colors = colors

    @classmethod
    def from_dict(cls, dikt) -> 'CurrSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CurrSettings of this CurrSettings.  # noqa: E501
        :rtype: CurrSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brightness(self) -> int:
        """Gets the brightness of this CurrSettings.


        :return: The brightness of this CurrSettings.
        :rtype: int
        """
        return self._brightness

    @brightness.setter
    def brightness(self, brightness: int):
        """Sets the brightness of this CurrSettings.


        :param brightness: The brightness of this CurrSettings.
        :type brightness: int
        """

        self._brightness = brightness

    @property
    def currency(self) -> str:
        """Gets the currency of this CurrSettings.


        :return: The currency of this CurrSettings.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this CurrSettings.


        :param currency: The currency of this CurrSettings.
        :type currency: str
        """

        self._currency = currency

    @property
    def finhub_key(self) -> str:
        """Gets the finhub_key of this CurrSettings.


        :return: The finhub_key of this CurrSettings.
        :rtype: str
        """
        return self._finhub_key

    @finhub_key.setter
    def finhub_key(self, finhub_key: str):
        """Sets the finhub_key of this CurrSettings.


        :param finhub_key: The finhub_key of this CurrSettings.
        :type finhub_key: str
        """

        self._finhub_key = finhub_key

    @property
    def polygon_key(self) -> str:
        """Gets the polygon_key of this CurrSettings.


        :return: The polygon_key of this CurrSettings.
        :rtype: str
        """
        return self._polygon_key

    @polygon_key.setter
    def polygon_key(self, polygon_key: str):
        """Sets the polygon_key of this CurrSettings.


        :param polygon_key: The polygon_key of this CurrSettings.
        :type polygon_key: str
        """

        self._polygon_key = polygon_key

    @property
    def colors(self) -> object:
        """Gets the colors of this CurrSettings.


        :return: The colors of this CurrSettings.
        :rtype: object
        """
        return self._colors

    @colors.setter
    def colors(self, colors: object):
        """Sets the colors of this CurrSettings.


        :param colors: The colors of this CurrSettings.
        :type colors: object
        """

        self._colors = colors
